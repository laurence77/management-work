{
  "name": "Lead Scoring & Qualification",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lead-scoring",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "lead-scoring-webhook",
      "id": "webhook-trigger"
    },
    {
      "parameters": {
        "jsCode": "const leadData = $input.first().json.body;\nconst {\n  userId,\n  eventType,\n  budgetRange,\n  eventDate,\n  attendees,\n  company,\n  clientEmail,\n  clientName,\n  location,\n  specialRequests,\n  celebrityId,\n  userHistory = {}\n} = leadData;\n\n// Initialize scoring\nlet score = 0;\nlet qualificationReasons = [];\nlet disqualificationReasons = [];\n\n// Budget scoring (40% of total score)\nconst budgetScores = {\n  'under-25k': 10,\n  '25k-50k': 20,\n  '50k-100k': 30,\n  '100k-250k': 35,\n  '250k-500k': 40,\n  '500k+': 40\n};\nscore += budgetScores[budgetRange] || 0;\nif (budgetScores[budgetRange] >= 30) {\n  qualificationReasons.push(`High budget range: ${budgetRange}`);\n} else if (budgetScores[budgetRange] <= 20) {\n  disqualificationReasons.push(`Low budget range: ${budgetRange}`);\n}\n\n// Event type scoring (15% of total score)\nconst eventTypeScores = {\n  'Corporate Event': 15,\n  'Product Launch': 15,\n  'Award Ceremony': 12,\n  'Conference': 12,\n  'Charity Event': 10,\n  'Wedding': 8,\n  'Private Party': 8,\n  'Birthday Party': 5,\n  'Virtual Event': 10,\n  'Other': 3\n};\nscore += eventTypeScores[eventType] || 0;\nif (eventTypeScores[eventType] >= 12) {\n  qualificationReasons.push(`Professional event type: ${eventType}`);\n}\n\n// Company presence (10% of total score)\nif (company && company.trim().length > 0) {\n  score += 10;\n  qualificationReasons.push('Company/organization provided');\n}\n\n// Attendee count scoring (10% of total score)\nconst attendeeScores = {\n  '1-50': 3,\n  '51-100': 5,\n  '101-500': 8,\n  '501-1000': 10,\n  '1000+': 10\n};\nscore += attendeeScores[attendees] || 0;\nif (attendeeScores[attendees] >= 8) {\n  qualificationReasons.push(`Large event size: ${attendees} attendees`);\n}\n\n// Timing scoring (10% of total score)\nif (eventDate) {\n  const eventDateObj = new Date(eventDate);\n  const now = new Date();\n  const daysAhead = Math.ceil((eventDateObj - now) / (1000 * 60 * 60 * 24));\n  \n  if (daysAhead >= 30 && daysAhead <= 180) {\n    score += 10; // Ideal planning window\n    qualificationReasons.push('Optimal booking timeline (30-180 days ahead)');\n  } else if (daysAhead >= 14 && daysAhead < 30) {\n    score += 7; // Good planning\n    qualificationReasons.push('Good booking timeline (2-4 weeks ahead)');\n  } else if (daysAhead > 180) {\n    score += 5; // Too far ahead\n  } else if (daysAhead < 14) {\n    score += 2; // Rush booking\n    disqualificationReasons.push('Very short notice booking (less than 2 weeks)');\n  }\n}\n\n// Location scoring (5% of total score)\nconst majorCities = ['Los Angeles', 'New York', 'Chicago', 'Miami', 'Las Vegas', 'Atlanta', 'Nashville', 'London', 'Toronto'];\nif (location && majorCities.some(city => location.toLowerCase().includes(city.toLowerCase()))) {\n  score += 5;\n  qualificationReasons.push('Event in major market');\n}\n\n// User history scoring (10% of total score)\nif (userHistory.previousBookings > 0) {\n  score += 5;\n  qualificationReasons.push('Returning customer');\n  \n  if (userHistory.totalSpent > 50000) {\n    score += 5;\n    qualificationReasons.push('High-value customer history');\n  }\n  \n  if (userHistory.averageRating >= 4.5) {\n    qualificationReasons.push('Excellent customer rating history');\n  } else if (userHistory.averageRating < 3.0) {\n    disqualificationReasons.push('Poor customer rating history');\n  }\n}\n\n// Email domain scoring (bonus points)\nif (clientEmail) {\n  const domain = clientEmail.split('@')[1];\n  const corporateDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com'];\n  \n  if (!corporateDomains.includes(domain.toLowerCase())) {\n    score += 3; // Corporate or custom domain\n    qualificationReasons.push('Professional email domain');\n  }\n}\n\n// Special requests analysis (bonus/penalty)\nif (specialRequests && specialRequests.length > 100) {\n  score += 2; // Detailed requirements show serious intent\n  qualificationReasons.push('Detailed event requirements provided');\n}\n\n// Determine qualification level\nlet qualificationLevel;\nlet priority;\nlet autoActions = [];\n\nif (score >= 70) {\n  qualificationLevel = 'Hot Lead';\n  priority = 'high';\n  autoActions.push('immediate_followup', 'assign_premium_agent', 'expedite_quote');\n} else if (score >= 50) {\n  qualificationLevel = 'Warm Lead';\n  priority = 'medium';\n  autoActions.push('followup_within_2hours', 'assign_experienced_agent');\n} else if (score >= 30) {\n  qualificationLevel = 'Cold Lead';\n  priority = 'low';\n  autoActions.push('followup_within_24hours', 'send_info_packet');\n} else {\n  qualificationLevel = 'Poor Lead';\n  priority = 'very_low';\n  autoActions.push('automated_response_only', 'nurture_campaign');\n  disqualificationReasons.push('Overall low qualification score');\n}\n\n// Risk assessment\nlet riskFactors = [];\nif (disqualificationReasons.length > 2) {\n  riskFactors.push('Multiple disqualification factors');\n}\nif (score < 20) {\n  riskFactors.push('Very low lead score');\n}\nif (eventDate) {\n  const daysAhead = Math.ceil((new Date(eventDate) - new Date()) / (1000 * 60 * 60 * 24));\n  if (daysAhead < 7) {\n    riskFactors.push('Extremely short notice');\n  }\n}\n\nreturn {\n  leadId: userId + '-' + Date.now(),\n  userId,\n  score,\n  qualificationLevel,\n  priority,\n  qualificationReasons,\n  disqualificationReasons,\n  riskFactors,\n  autoActions,\n  analysis: {\n    budgetScore: budgetScores[budgetRange] || 0,\n    eventTypeScore: eventTypeScores[eventType] || 0,\n    totalPossibleScore: 100\n  },\n  recommendedActions: {\n    immediate: autoActions.filter(action => action.includes('immediate')),\n    followup: autoActions.filter(action => action.includes('followup')),\n    automation: autoActions.filter(action => !action.includes('immediate') && !action.includes('followup'))\n  },\n  originalData: leadData,\n  scoredAt: new Date().toISOString()\n};"
      },
      "name": "Calculate Lead Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "calculate-score"
    },
    {
      "parameters": {
        "url": "{{$env.API_BASE_URL}}/api/leads/store",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "leadData",
              "value": "={{ $json }}"
            }
          ]
        },
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "Authorization",
          "value": "Bearer {{$env.API_TOKEN}}"
        }
      },
      "name": "Store Lead Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300],
      "id": "store-lead"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.priority }}",
              "rightValue": "high",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "name": "Check if Hot Lead",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 200],
      "id": "check-hot-lead"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.priority }}",
              "rightValue": "medium",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "name": "Check if Warm Lead",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 400],
      "id": "check-warm-lead"
    },
    {
      "parameters": {
        "url": "{{$env.API_BASE_URL}}/api/notifications/hot-lead-alert",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "leadData",
              "value": "={{ $json }}"
            },
            {
              "name": "priority",
              "value": "urgent"
            }
          ]
        },
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "Authorization",
          "value": "Bearer {{$env.API_TOKEN}}"
        }
      },
      "name": "Send Hot Lead Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 120],
      "id": "hot-lead-alert"
    },
    {
      "parameters": {
        "url": "{{$env.API_BASE_URL}}/api/automation/assign-agent",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "leadId",
              "value": "={{ $json.leadId }}"
            },
            {
              "name": "priority",
              "value": "high"
            },
            {
              "name": "agentType",
              "value": "premium"
            }
          ]
        },
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "Authorization",
          "value": "Bearer {{$env.API_TOKEN}}"
        }
      },
      "name": "Assign Premium Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 200],
      "id": "assign-premium-agent"
    },
    {
      "parameters": {
        "url": "{{$env.API_BASE_URL}}/api/automation/schedule-followup",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "leadId",
              "value": "={{ $json.leadId }}"
            },
            {
              "name": "followupTime",
              "value": "immediate"
            },
            {
              "name": "priority",
              "value": "high"
            }
          ]
        },
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "Authorization",
          "value": "Bearer {{$env.API_TOKEN}}"
        }
      },
      "name": "Schedule Immediate Followup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 280],
      "id": "immediate-followup"
    },
    {
      "parameters": {
        "url": "{{$env.API_BASE_URL}}/api/automation/schedule-followup",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "leadId",
              "value": "={{ $json.leadId }}"
            },
            {
              "name": "followupTime",
              "value": "2_hours"
            },
            {
              "name": "priority",
              "value": "medium"
            }
          ]
        },
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "Authorization",
          "value": "Bearer {{$env.API_TOKEN}}"
        }
      },
      "name": "Schedule 2-Hour Followup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 400],
      "id": "two-hour-followup"
    },
    {
      "parameters": {
        "jsCode": "const leadData = $input.first().json;\n\n// Create personalized email based on lead score and qualification\nlet emailTemplate;\nlet subject;\n\nif (leadData.qualificationLevel === 'Hot Lead') {\n  subject = `🌟 Premium Booking Inquiry - ${leadData.originalData.celebrityName || 'Celebrity Booking'}`;\n  emailTemplate = `\n    <h2>Thank you for your premium booking inquiry!</h2>\n    <p>Dear ${leadData.originalData.clientName},</p>\n    <p>We've received your high-priority booking request and have immediately assigned our premium concierge team to assist you.</p>\n    \n    <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n      <h3>Your Booking Details:</h3>\n      <ul>\n        <li><strong>Event:</strong> ${leadData.originalData.eventType}</li>\n        <li><strong>Date:</strong> ${leadData.originalData.eventDate}</li>\n        <li><strong>Attendees:</strong> ${leadData.originalData.attendees}</li>\n        <li><strong>Budget Range:</strong> ${leadData.originalData.budgetRange}</li>\n      </ul>\n    </div>\n    \n    <p><strong>Next Steps:</strong></p>\n    <ul>\n      <li>✅ Your inquiry has been prioritized (Lead Score: ${leadData.score}/100)</li>\n      <li>📞 Our premium agent will contact you within 30 minutes</li>\n      <li>💎 You'll receive a detailed proposal within 2 hours</li>\n    </ul>\n    \n    <p>Best regards,<br>Premium Booking Team</p>\n  `;\n} else if (leadData.qualificationLevel === 'Warm Lead') {\n  subject = `Your Celebrity Booking Inquiry - ${leadData.originalData.celebrityName || 'Professional Event'}`;\n  emailTemplate = `\n    <h2>Thank you for your booking inquiry!</h2>\n    <p>Dear ${leadData.originalData.clientName},</p>\n    <p>We've received your booking request and will have one of our experienced agents contact you soon.</p>\n    \n    <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n      <h3>Your Event Details:</h3>\n      <ul>\n        <li><strong>Event Type:</strong> ${leadData.originalData.eventType}</li>\n        <li><strong>Date:</strong> ${leadData.originalData.eventDate}</li>\n        <li><strong>Location:</strong> ${leadData.originalData.location}</li>\n      </ul>\n    </div>\n    \n    <p><strong>What happens next:</strong></p>\n    <ul>\n      <li>📋 We'll review your requirements in detail</li>\n      <li>📞 Our team will contact you within 2 hours</li>\n      <li>📊 You'll receive a customized proposal</li>\n    </ul>\n    \n    <p>Best regards,<br>Booking Team</p>\n  `;\n} else {\n  subject = `Celebrity Booking Information - ${leadData.originalData.eventType}`;\n  emailTemplate = `\n    <h2>Thank you for your interest!</h2>\n    <p>Dear ${leadData.originalData.clientName},</p>\n    <p>We've received your inquiry about celebrity booking services.</p>\n    \n    <p>Our team will review your request and get back to you within 24 hours with more information about how we can help make your event memorable.</p>\n    \n    <p>In the meantime, feel free to browse our celebrity roster and event planning resources on our website.</p>\n    \n    <p>Best regards,<br>Customer Service Team</p>\n  `;\n}\n\nreturn {\n  to: leadData.originalData.clientEmail,\n  subject: subject,\n  html: emailTemplate,\n  leadId: leadData.leadId,\n  priority: leadData.priority\n};"
      },
      "name": "Generate Personalized Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300],
      "id": "generate-response"
    },
    {
      "parameters": {
        "url": "{{$env.API_BASE_URL}}/api/email/send",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.to }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "html",
              "value": "={{ $json.html }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.priority }}"
            }
          ]
        },
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "Authorization",
          "value": "Bearer {{$env.API_TOKEN}}"
        }
      },
      "name": "Send Personalized Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 300],
      "id": "send-email"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \n  success: true, \n  leadId: $('Calculate Lead Score').first().json.leadId,\n  score: $('Calculate Lead Score').first().json.score,\n  qualification: $('Calculate Lead Score').first().json.qualificationLevel,\n  priority: $('Calculate Lead Score').first().json.priority,\n  message: 'Lead processed and scored successfully'\n} }}"
      },
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 300],
      "id": "webhook-response"
    }\n  ],\n  \"connections\": {\n    \"Webhook Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Calculate Lead Score\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Calculate Lead Score\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Store Lead Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Store Lead Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check if Hot Lead\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Check if Warm Lead\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Generate Personalized Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check if Hot Lead\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Hot Lead Alert\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Assign Premium Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Schedule Immediate Followup\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        []\n      ]\n    },\n    \"Check if Warm Lead\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Schedule 2-Hour Followup\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        []\n      ]\n    },\n    \"Generate Personalized Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Send Personalized Email\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Send Personalized Email\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Webhook Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"staticData\": null,\n  \"tags\": [\n    {\n      \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n      \"updatedAt\": \"2024-01-01T00:00:00.000Z\",\n      \"id\": \"lead-qualification\",\n      \"name\": \"Lead Qualification\"\n    }\n  ],\n  \"triggerCount\": 1,\n  \"updatedAt\": \"2024-01-01T00:00:00.000Z\",\n  \"versionId\": \"1\"\n}"